<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开发 on 尚坤的博客</title>
    <link>https://shangkunli.github.io/tags/%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 开发 on 尚坤的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 20 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://shangkunli.github.io/tags/%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CompPhys: Differentiation and Intergration</title>
      <link>https://shangkunli.github.io/post/comp_phys/2023-2-6-compphys-differentiation-and-intergration/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shangkunli.github.io/post/comp_phys/2023-2-6-compphys-differentiation-and-intergration/</guid>
      <description>介绍 这一章节主要介绍数值微分与积分的方法
Computational Physics: Differentiation and Intergration
求解问题 题目说明 Compute the derivative of $f(x) = sinx$ at $x = π/3$ using the Richardson extrap- olation algorithm. Start with h = 1 and find the number of rows in the Richardson table required to estimate the derivative with six significant decimal digits. Output the Richardson table.
Radial wave function of the 3s orbital is:
$R_{3s} = \frac{1}{9√3} ×(6−6ρ+ρ^2)×Z^{3/2}×e^{-\rho/2}$
· r = radius expressed in atomic units (1 Bohr radius = 52.</description>
    </item>
    
    <item>
      <title>CompPhys: FFT</title>
      <link>https://shangkunli.github.io/post/comp_phys/2023-2-6-compphys-fft/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shangkunli.github.io/post/comp_phys/2023-2-6-compphys-fft/</guid>
      <description>介绍 这一章节主要介绍傅立叶变换的相关算法
CompPhys: FFT
求解问题 题目说明 $\hat H =-\frac{\hbar^2}{2m}\frac{\partial^2}{\partial x^2} +V(x)$. Periodic potential $V(x)=V(x+a)$. Using FFT, find the lowest three eigenvalues of the eigenstates that satisfy $\psi_i=\psi_i(x+1)$
$U_0=2eV, L_w=0.9nm, L_B=0.1nm, a=1nm$
Download the file called sunspots.txt, which contains the observed number of sunspots on the Sun for each month since January 1749.
Write a program to calculate the Fourier transform of the sunspot data and then make a graph of the magnitude squared $|c_k|^2$ of the Fourier coeﬀicients as a function of k—also called the power spectrum of the sunspot signal.</description>
    </item>
    
    <item>
      <title>CompPhys: Find Root</title>
      <link>https://shangkunli.github.io/post/comp_phys/find_root/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shangkunli.github.io/post/comp_phys/find_root/</guid>
      <description>介绍 这一章节主要介绍寻找方程根与函数极小值的方法（如梯度下降法）
Computational Physics: Find Root
求解问题 题目说明 求解实系数方程$𝑎𝑥^2+𝑏𝑥+𝑐+0$的解。要求:系数𝑎, 𝑏, 𝑐为程序执行时键盘输入，𝑎, 𝑏, 𝑐为任意实数，所有的解均输出到屏幕。 24 点游戏是儿时玩的主要益智类游戏之一，玩法为:从一副扑克中抽取 4 张牌，对 4 张牌使用加减乘除中的任何方法，使计算结果为 24。例如， 2,3,4,6，通过(((4+6)-2)*3) =24，最快算出24者胜。请 采用 Fortran90 编程求解 24 点游戏的解。 Sketch the function $𝑥^2−5𝑥+3=0$: (1) Determine the two positive roots to 4 decimal places using the bisection method. (2) Take the two roots that you found in the previous question (accurate to 4 decimals) and “polish them up” to 14 decimal places using the Newton-Raphson method.</description>
    </item>
    
    <item>
      <title>CompPhys: Interpolation</title>
      <link>https://shangkunli.github.io/post/comp_phys/2023-2-6-compphys-interpolation/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shangkunli.github.io/post/comp_phys/2023-2-6-compphys-interpolation/</guid>
      <description>介绍 这一章节主要介绍插值的相关算法，如牛顿插值法，样条插值法等
Computational Physics: Interpolation
求解问题 题目说明 Newton interpolation of:
(i) 10 equal spacing points of cos x within $[0, π]$,
(ii) 10 equal spacing points $\frac{1}{1+25x^2}$ within $[-1,1]$.
Compare the results with the cubic spline interpolation.
The table below gives the temperature T along a metal rod whose ends are kept at fixed constant temperature. The temperature is a function of the distance x along the rod.
(1)Compute a least-squares, straight-line fit to these data using$ T (x) = a + bx $</description>
    </item>
    
    <item>
      <title>CompPhys: Matrix</title>
      <link>https://shangkunli.github.io/post/comp_phys/2023-2-6-compphys-matrix/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shangkunli.github.io/post/comp_phys/2023-2-6-compphys-matrix/</guid>
      <description>介绍 这一章节主要介绍矩阵的相关处理，消元，矩阵分解，特征值问题等
Computational Physics: Matrix
求解问题 题目说明 Prove that the time complexity of the Gaussian elimination algorithm is $O(N^3)$.
Write a general code to transform a n×m matrix into the REDUCED ROW ECHE-
LON FORM, and use the code to obtain the RREF of the following matrix.
Solve the 1D Schrodinger equation with the potential (i) $V (x) = x^2$; (ii) $V (x) = x^4 − x^2 $with the variational approach using a Gaussian basis (either fixed widths or fixed centers).</description>
    </item>
    
    <item>
      <title>CompPhys: Monte Carlo simulations</title>
      <link>https://shangkunli.github.io/post/comp_phys/2023-2-6-compphys-monte-carlo-simulations/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shangkunli.github.io/post/comp_phys/2023-2-6-compphys-monte-carlo-simulations/</guid>
      <description>介绍 这一章节主要偏微分方程的数值求解方法
CompPhys: Monte Carlo simulations
求解问题 题目说明 The interior of a $d$-dimensional hypersphere of unit radius is defined by the condition $x_1^2+x_2^2+\dots+x_d^2\le1$. Write a program that finds the volume of a hypersphere using a Monte Carlo method. Test your program for $d=2$ and $d=3$ and then calculate the volume for $d=4$ and $d=5$, compare your results with the exact results.
Write a MC code for a 3D Face-Centered Cubic lattice using the Heisenberg spin model (adopt periodic boundary condition).</description>
    </item>
    
    <item>
      <title>CompPhys: Ordinary Differential Equations</title>
      <link>https://shangkunli.github.io/post/comp_phys/2023-2-6-compphys-ordinary-differential-equations/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shangkunli.github.io/post/comp_phys/2023-2-6-compphys-ordinary-differential-equations/</guid>
      <description>介绍 这一章节主要常微分方程的数值求解方法
CompPhys: Ordinary Differential Equations
求解问题 题目说明 Write a code to numerically solves the motion of a simple pendulum using Euler’s method, midpoint method, RK4, Euler-trapezoidal method (implement these methods by yourself). Plot the angle and total energy as a function of time. Explain the results.
Write a code to numerically solves radial Schrödinger equation for:
$$ \left[-\frac{1}{2}\nabla^2+V(r)\right]\psi( r)=E\psi(r), V( r)=V(r)$$
​ (1) $V(r)=-\frac{1}{r}$ (hydrogen atom)
​ (2) $Z_{ion}=0.4000000, C_1=-14.</description>
    </item>
    
    <item>
      <title>CompPhys: Partial Differential Equations</title>
      <link>https://shangkunli.github.io/post/comp_phys/2023-2-6-compphys-partial-differential-equations/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shangkunli.github.io/post/comp_phys/2023-2-6-compphys-partial-differential-equations/</guid>
      <description>介绍 这一章节主要偏微分方程的数值求解方法
CompPhys: Partial Differential Equations
求解问题 题目说明 Consider the Poisson equation:
​ $$ \nabla^2\phi(x,y)=-\rho (x,y) / \epsilon_0 $$
from electrostatics on a rectangular geometry with $x\in[0,L_x]$ and $y\in[0,L_y]$. Write a program that solves this equation using the relaxation method. Test your program with:
(a) $\rho(x,y)=0,\ \phi(0,y)=\phi(L_x,y)=\phi(x,0)=0,\ \phi(x,L_y)=1V,\ L_x=1m.\ L_y=1.5m$
(b) $\rho(x,y)/\epsilon_0=1V/m^2,\ \phi(0,y)=\phi(L_x,y)=\phi(x,0)=\phi(x,L_y)=0,\ L_x=1m.\ L_y=1m$
Solve the time-dependent Schrodinger equation using both the Crank–Nicolson scheme and stable explicit scheme. Consider the one-dimensional case and test it by applying it to the problem of a square well with a Gaussian initial state coming in from the left.</description>
    </item>
    
    <item>
      <title>Computational Physics Guide</title>
      <link>https://shangkunli.github.io/post/comp_phys/comp_phys/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shangkunli.github.io/post/comp_phys/comp_phys/</guid>
      <description>说明 这是我个人学习Computational Physics的资料笔记整理 我的主要开发语言是Python及C/C++ 每一部分章节的内容包括对应的slides，问题及Documentation，源码 Computational Physcis Note CompPhys: Find Root
CompPhys: Matrix
CompPhys: Interpolation
CompPhys: Differentiation and Intergration
CompPhys: FFT
CompPhys: Ordinary Differential Equations
CompPhys: Partial Differential Equations
CompPhys: Monte Carlo simulations</description>
    </item>
    
    <item>
      <title>Verilog笔记_Guide</title>
      <link>https://shangkunli.github.io/post/verilog/verilog%E7%AC%94%E8%AE%B0_guide/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shangkunli.github.io/post/verilog/verilog%E7%AC%94%E8%AE%B0_guide/</guid>
      <description>说明 这是我个人学习Verilog的路径整理以及资料笔记整理 入门阶段 我主要通过HDLBits进行代码练习和知识点理解 阅读这一部分教程也在一定程度上帮助了我，这一部分教程的阅读笔记整理在了下面的文档中 Verilog入门笔记 Verilog入门笔记：第1章 介绍
Verilog入门笔记：第2章 基础语法及数据
Verilog入门笔记：第3章 赋值与时延
Verilog入门笔记：第4章 结构与控制
Verilog入门笔记：第5章 模块
Verilog入门笔记：第6章 函数</description>
    </item>
    
    <item>
      <title>Verilog入门笔记：第1章 介绍</title>
      <link>https://shangkunli.github.io/post/verilog/2023-2-6-verilog%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E7%AC%AC1%E7%AB%A0-%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shangkunli.github.io/post/verilog/2023-2-6-verilog%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E7%AC%AC1%E7%AB%A0-%E4%BB%8B%E7%BB%8D/</guid>
      <description>CHAPTER 1 1.1 Vrilog介绍 </description>
    </item>
    
    <item>
      <title>Verilog入门笔记：第2章 基础语法及数据</title>
      <link>https://shangkunli.github.io/post/verilog/2023-2-6-verilog%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E7%AC%AC2%E7%AB%A0-%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shangkunli.github.io/post/verilog/2023-2-6-verilog%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E7%AC%AC2%E7%AB%A0-%E4%BB%8B%E7%BB%8D/</guid>
      <description>CHAPTER 2 2.1 Verilog基础语法 代码格式 格式与C代码相近，以分号;结尾
注释 单行注释// 多行注释/* 与 */结合 标识符与关键词 标识符：由字母，数字，$ ，_组合而成，但第一个字符必须为字母或者下划线。标识符区分大小写 关键字：类似C语言，是verilog用于预定义语言用的标识符 2.2 Verilog数值表示 布尔数值表示 0：逻辑假/低电平 1：逻辑真/高电平 x/X：未知 z/Z：高阻态 整数数值表示 十进制 d，十六进制 h，八进制 o，二进制 b
指明位宽
4&amp;#39;b1011 // 4bit 数值 32&amp;#39;h3022_c0de // 32bit 的数值，下划线为增加可读性 也可不指明位宽，且直接写数字时默认为十进制
负数直接在表示位宽的数字前加负号
字符串表示 用&amp;quot;&amp;ldquo;括起来的字符队列 2.3 Verilog数据类型 线网(wire) wire类型表示硬件单元之间的物理连线 寄存器(reg) reg类型用来表示存储单元 整数、实数、时间等数据类型属于reg类型 整数（integer）：reg为无符号数，integer为有符号数 实数（real）：可用十进制/科学计数法表示 时间（time）：对仿真时间进行保存，通过调用$time获取当前仿真时间 字符串：每一个字符占8bit，有转义字符 数组 integer flag [7:0] ; //8个整数组成的数组 reg [3:0] counter [3:0] ; //由4个4bit计数器组成的数组 wire [7:0] addr_bus [3:0] ; //由4个8bit wire型变量组成的数组 wire data_bit[7:0][5:0] ; //声明1bit wire型变量的二维数组 reg [31:0] data_4d[11:0][3:0][3:0][255:0] ; //声明4维的32bit数据变量数组 数组由多个元件组成，向量是一个元件</description>
    </item>
    
    <item>
      <title>Verilog入门笔记：第3章 赋值与时延</title>
      <link>https://shangkunli.github.io/post/verilog/2023-2-6-verilog%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E7%AC%AC3%E7%AB%A0-%E8%B5%8B%E5%80%BC%E4%B8%8E%E6%97%B6%E5%BB%B6/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shangkunli.github.io/post/verilog/2023-2-6-verilog%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E7%AC%AC3%E7%AB%A0-%E8%B5%8B%E5%80%BC%E4%B8%8E%E6%97%B6%E5%BB%B6/</guid>
      <description>CHAPTER 3 3.1 Verilog连续赋值 连续赋值语句 用于对wire型变量进行赋值
assign LHS_target = RHS_expression ； 任何已声明的wire变量的连续赋值语句都是以assign开头：
wire Cout, A, B ; assign Cout = A &amp;amp; B ; //实现计算A与B的功能 另一种对wire型赋值的方法，在声明时赋值：
wire A, B ; wire Cout = A &amp;amp; B ; 全加器 全加器的逻辑表达式为： So = Ai ⊕ Bi ⊕ Ci ; Co = AiBi + Ci(Ai+Bi) 加法器代码：
module full_adder1( input Ai, Bi, Ci, output So, Co; assign So = Ai ^ Bi ^ Ci ; assign Co = (Ai &amp;amp; Bi) | (Ci &amp;amp; (Ai | Bi)); endmodule 例子见FullAdder</description>
    </item>
    
    <item>
      <title>Verilog入门笔记：第4章 结构与控制</title>
      <link>https://shangkunli.github.io/post/verilog/2023-2-6-verilog%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E7%AC%AC4%E7%AB%A0-%E7%BB%93%E6%9E%84%E4%B8%8E%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shangkunli.github.io/post/verilog/2023-2-6-verilog%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E7%AC%AC4%E7%AB%A0-%E7%BB%93%E6%9E%84%E4%B8%8E%E6%8E%A7%E5%88%B6/</guid>
      <description>CHAPTER 4 4.1 Verilog过程结构 initial语句与always语句，两个语句在模块间并行执行，但语句内部顺序执行 initial语句 initial语句从0时刻开始执行，只执行1次 如果initial块内包含多个语句，使用begin&amp;amp;end组成一个块语句 如果initial块内只有1条语句，可以不用begin&amp;amp;end 不可综合，用于初始化、信号检测 always语句 always语句重复执行，从0时刻开始执行其行为语句，当执行完最后一条时，再次执行第一条语句 多用于仿真时钟的产生 4.2 Verilog过程赋值 过程赋值是在initial块或always块中的赋值 连续赋值总是处于激活状态，任何操作数改变都会影响表达式结果；过程赋值只有在语句执行时起作用 阻塞赋值 顺序执行，依次完成 使用=作为赋值符号 非阻塞赋值 并行执行，同时进行；不会阻塞位于同一个语句块的后面语句 使用&amp;lt;=作为赋值符号 使用非阻塞赋值避免竞争冒险 在设计电路时，always 时序逻辑块中多用非阻塞赋值，always 组合逻辑块中多用阻塞赋值；在仿真电路时，initial 块中一般多用阻塞赋值
使用阻塞赋值交换两个寄存器值
//由于always语句并行执行，无法达到目的 always @(posedge clk) begin a = b ; end always @(posedge clk) begin b = a; end //由于使用非阻塞赋值，新值并不会影响结果 always @(posedge clk) begin a &amp;lt;= b ; end always @(posedge clk) begin b &amp;lt;= a; end 4.3 Verilog时序控制 时延控制 指定了语句从开始执行到执行完毕之间的时间间隔 常规时延</description>
    </item>
    
    <item>
      <title>Verilog入门笔记：第5章 模块</title>
      <link>https://shangkunli.github.io/post/verilog/2023-2-6-verilog%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E7%AC%AC5%E7%AB%A0-%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shangkunli.github.io/post/verilog/2023-2-6-verilog%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E7%AC%AC5%E7%AB%A0-%E6%A8%A1%E5%9D%97/</guid>
      <description>CHAPTER 5 5.1 Verilog模块与端口 模块 模块是verilog中基本单元的定义形式，是与外界交互的接口
module module_name #(parameter_list) (port_list) ; Declarations_and_Statements ;//模块内部的设计语句 endmodule 端口 模块与外界交互的接口 端口列表
模块的定义中包含一个可选的端口列表，一般将不带类型、不带位宽的信号变量罗列在模块声明里
如果模块与外界环境没有交互，则可以不用声明端口列表
module pad( DIN, OEN, PULL, DOUT, PAD); 端口声明
端口信号在列表中列出之后，就可以在模块实体中进行声明
端口类型：输入(input)，输出(output)，双向(inout) Input, inout不能声明为reg类型 端口数据类型：wire, reg //端口类型声明 input DIN, OEN ; input [1:0] PULL ; //(00,01-dispull, 11-pullup, 10-pulldown) inout PAD ; //pad value output DOUT ; //pad load when pad configured as input //端口数据类型声明 wire DIN, OEN ; wire [1:0] PULL ; wire PAD ; reg DOUT ; 当端口具有wire属性时，不用再次声明端口为wire型。但当端口有reg属性时，则reg声明不可省</description>
    </item>
    
    <item>
      <title>Verilog入门笔记：第6章 函数</title>
      <link>https://shangkunli.github.io/post/verilog/2023-2-6-verilog%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E7%AC%AC6%E7%AB%A0-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shangkunli.github.io/post/verilog/2023-2-6-verilog%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E7%AC%AC6%E7%AB%A0-%E5%87%BD%E6%95%B0/</guid>
      <description>CHAPTER 6 6.1 Verilog函数 函数 function 在模块中定义，位置任意，在模块的任何地方引用，作用范围局限在此模块
不含延迟、时序或时序逻辑控制
至少一个输入变量
只有一个返回值，没有输出
不含非阻塞赋值语句
函数可以调用其他函数
function [range-1:0] function_id ;//声明一个宽度为range，名字为function_id的寄存器变量，返回值通过这个传递 input_declaration ; other_declaration ; procedural_statement ; endfunction 函数调用
function_id(input1, input2, …); 函数声明时，也可以在函数名后加一个括号，将input括起来
function [N-1:0] data_rvs（ input [N-1:0] data_in ...... ） ; 常数函数 在仿真开始之前，在编译期间就计算出结果为常数的函数 不允许访问全局变量或者调用系统函数，可调用另一个常数函数 automatic函数 verliog函数中局部变量为静态的，每次调用时局部变量使用同一个存储空间。如果某个函数在两个不同地方同时调用，两个函数调用行为对同一地址操作，导致不确定的函数结果 使用automatic对函数进行说明，调用时自动分配内存空间 数码管译码 用信号 abcdefg 来控制光亮控制端，用信号 csn 来控制片选，4 位 10 进制的数字个十百千位分别用 4 个 4bit 信号 single_digit, ten_digit, hundred_digit, kilo_digit 来表示，则一个数码管的显示设计可以描述如下
module digital_tube ( input clk , input rstn , input en , input [3:0] single_digit , input [3:0] ten_digit , input [3:0] hundred_digit , input [3:0] kilo_digit , output reg [3:0] csn , //chip select, low-available output reg [6:0] abcdefg //light control ); reg [1:0] scan_r ; //scan_ctrl always @ (posedge clk or negedge rstn) begin if(!</description>
    </item>
    
  </channel>
</rss>
